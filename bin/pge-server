#!/usr/bin/env node

var pge_parse = require('../lib/pge-parse');
require('date-utils');

var formidable = require('formidable');
var http = require('http');
var sys = require('sys');

http.createServer(function(req, res) {
  if (req.url == '/upload' && req.method.toLowerCase() == 'post') {
    // parse a file upload
    var form = new formidable.IncomingForm();
    form.parse(req, function(err, fields, files) {
      res.writeHead(200, {'content-type': 'text/plain'});
    });

    var argv = {};

    form.on('progress', function(bytesReceived, bytesExpected)
    {
//        console.log(100*bytesReceived/bytesExpected,"%");
    });

    form.on('field', function(name, value)
    {
        argv[name] = value;
    });

    form.on('file', function(name, file)
    {
        argv['_'] = [ file.path ];
    });

    form.onPart = function(part) {
      if (!part.filename) {
        // let formidable handle all non-file parts
        form.handlePart(part);
      } else {
        console.log("New parser");
        var parser = pge_parse.PGEParser(
                        argv.a,
                        argv.b,
                        argv.c,
                        argv.m,
                        argv.s ? new Date(argv.s) : undefined,
                        argv.e ? new Date(argv.e).addDays(1) : undefined
                    );

        function report(totals)
        {
            console.log("Report");
            // Print out report
            // for(var rate in totals)
            // {
            //     // data = totals[rate];
            //     // util.puts("Rate: "+rate);
            //     // for(var period in data)
            //     // {
            //     //     sub_data = data[period];
            //     //     util.puts(period +
            //     //         "\tCost: $"+printf("%0.2f",sub_data.cost) +
            //     //         "\t Per kWh: $"+printf("%0.2f",sub_data.cost/sub_data.amount) +
            //     //         "\t Per day: $"+printf("%0.2f",sub_data.cost/sub_data.numDays) +
            //     //         "");
            //     // }

            // }
            res.end(sys.inspect(totals));
        }

        var details = parser.detailsParser(report);

        part.addListener('data', function(chunk) {
            console.log("Chunk");
            details.parseString(chunk);
        });
      }
    }

    // form.on('end', function()
    // {
    //     // We should really use node-xml parseString() repeatedly to parse in chunks as the upload comes in

    //     if(argv.S)
    //     {
    //         parser.summaryParser(function() { details.parseFile(argv._[0])}).parseFile(argv.S);
    //     } else {
    //         details.parseFile(argv._[0]);
    //     }
    // });

    return;
  }

  // show a file upload form
  res.writeHead(200, {'content-type': 'text/html'});
  res.end
    ( '<form action="/upload" enctype="multipart/form-data" method="post">'
    + '<input type="text" name="a" value="true"><br>'
    + '<input type="text" name="b" value="T"><br>'
    + '<input type="text" name="c" value="350"><br>'
    + '<input type="text" name="m" value="50"><br>'
    + '<input type="file" name="upload"><br>'
    + '<input type="submit" value="Upload">'
    + '</form>'
    );
}).listen(22874);

/*
    .usage('Usage: $0 [-a] [-b <baseline territory>] [-m <miles_per_day>] [-c <Wh per mile>] <XML data filename>')
    .demand(1)
    .boolean('a')
    .alias('a','all-electric')
    .describe('a','Use the "all electric" baseline numbers -- specify this option if your heating is electric instead of gas')
    .default('b', 'T')
    .alias('b','baseline-territory')
    .describe('b',"Baseline territory ['P'..'Z'] from http://bit.ly/12kMV2l")
    .default('c', 350)
    .alias('c','Wh-per-mile')
    .describe('c','How many Wh per mile do you get')
    .default('m', 50)
    .alias('m','miles-per-day')
    .describe('m','How many electric car miles per day do you want to add at off-peak charging')
    .alias('s','start-date')
    .describe('s','Ignore any data before this date')
    .alias('e','end-data')
    .describe('e','Ignore any data after this date')
    .alias('S','summary')
    .describe('S','Summary bill data to obtain billing start/stop periods')
    .wrap(80)
    .argv

pge_parse.parseFile(
                        argv._[0],
                        argv.S,
                        argv.a,
                        argv.b,
                        argv.c,
                        argv.m,
                        argv.s ? new Date(argv.s) : null,
                        argv.e ? new Date(argv.e).addDays(1) : null
                    );
*/
